use crate::glyph::{GlyphEntry, Metrics, OutlineBounds};

{%- for font in fonts %}
    {%- for glyph in font.glyphs %}
static {{ glyph.codepoint }}_{{ font.name|upper }}: [u8; {{ glyph.bitmap_len }}] = [
    {%- for chunk in glyph.bitmap|batch(15) %}
    {% for column in chunk %}{{ column }}, {% endfor %}
    {%- endfor %}
];
    {%- endfor %}

pub static FONT_{{ font.name|upper }}: [(char, GlyphEntry); {{ font.glyphs|length }}] = [
    {%- for glyph in font.glyphs %}
    ('{{ glyph.character }}', GlyphEntry {
        glyph: &{{ glyph.codepoint }}_{{ font.name|upper }},
        px: {{ glyph.px }},
        metrics: Metrics {
            xmin: {{ glyph.metrics.xmin }},
            ymin: {{ glyph.metrics.ymin }},
            width: {{ glyph.metrics.width }},
            height: {{ glyph.metrics.height }},
            advance_width: {{ glyph.metrics.advance_width }},
            bounds: OutlineBounds {
                xmin: {{ glyph.metrics.bounds.xmin }},
                ymin: {{ glyph.metrics.bounds.ymin }},
                width: {{ glyph.metrics.bounds.width }},
                height: {{ glyph.metrics.bounds.height }},
            },
        },
    }),
    {%- endfor %}
];
{%- endfor %}

#[derive(Debug, Clone, Copy, Default, PartialEq)]
pub enum FontAlign {
    #[default] Left,
    Center,
    Right,
}

#[derive(Clone, Copy, Default, PartialEq)]
pub enum Font {
    #[default]
    {%- for font in fonts %}
    {{ font.name|capitalize }}{{ "," if not loop.last }}
    {%- endfor %}
}

impl Font {
    /// # get_glyphs
    ///
    /// Returns the static array of glyphs of the font on which is called.
    pub fn get_glyph(&self, ch: char) -> Option<&GlyphEntry> {
        match self {
            {%- for font in fonts %}
            Font::{{ font.name|capitalize }} => Self::find_glyph(&FONT_{{ font.name|upper }}, ch),
            {%- endfor %}
        }
    }

    pub fn get_size(&self) -> i32 {
        match self {
            {%- for font in fonts %}
            Font::{{ font.name|capitalize }} => {{ font.glyphs[0].px }},
            {%- endfor %}
        }
    }

    fn find_glyph(font: &[(char, GlyphEntry)], ch: char) -> Option<&GlyphEntry> {
        font.binary_search_by_key(&ch, |&(c, _)| c)
            .ok()
            .map(|idx| &font[idx].1)
    }
}
